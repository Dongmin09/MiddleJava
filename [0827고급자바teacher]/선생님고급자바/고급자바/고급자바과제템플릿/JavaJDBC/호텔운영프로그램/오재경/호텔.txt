package kr.or.ddit.basic.example;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

import kr.or.ddit.util.JDBCUtill;

public class Hotel {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement pstmt;
	private ResultSet rs;

	private Scanner scan = new Scanner(System.in);

	/**
	 * 메뉴를 출력하는 메서드
	 */
	public void displayMenu() {
		System.out.println();
		System.out.println("----------------------");
		System.out.println("  === 메뉴를 선 택 하세요 ===");
		System.out.println("  1. 체크인");
		System.out.println("  2. 체크아웃");
		System.out.println("  3. 객실상태");
		System.out.println("  4. 업무종료.");
		System.out.println("----------------------");
		System.out.print("메뉴선택 >> ");
	}

	
	/**
	 * 프로그램 시작메서드
	 */
	public void start() {
		int choice;
		do {
			displayMenu(); // 메뉴 출력
			choice = scan.nextInt(); // 메뉴번호 입력받기
			switch (choice) {
			case 1: // 자료 입력
				insertMember();
				break;
			case 2: // 자료 삭제
				deleteMember();
				break;
		
			case 3: // 전체 자료 출력
				displayMemberAll();
				break;
			case 4: // 작업 끝
				System.out.println("호텔 문을 닫습니다.");
				return;
			default:
				System.out.println("번호를 잘못 입력했습니다. 다시입력하세요");
			}
		} while (choice != 5);
	}

	/*
	 * 전체 회원 정보를 출력하는 메서드
	 */
	private void displayMemberAll() {
		System.out.println();
		System.out.println("------------------------------------------");
		System.out.println(" ID\t 이름 \t전화번호\t\t주 소");
		System.out.println("------------------------------------------");
		
		try {
			conn = JDBCUtill.getConnection();
			
			String sql = "select * from room";
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				String memId = rs.getNString("rom_id");
				String memName = rs.getNString("rom_name");
		
				
				System.out.println("객실번호 :"+memId + "투숙객 :"+memName);
			}
			System.out.println("-------------------------------------");
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			JDBCUtill.close(conn, stmt, pstmt, rs);
		}
	}


	/*
	 * 회원정보를 삭제하기 위한 메서드
	 */
	private void deleteMember() {
		System.out.println();
		System.out.println("어느방을 체크아웃 하시겠습니까?");
		System.out.print("방번호 입력>>");
		
		String memId = scan.next();
		
		try {
			conn = JDBCUtill.getConnection();
			
			String sql = " delete from room where rom_id = ? ";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memId);
			
			int cnt = pstmt.executeUpdate();
			
			if(cnt > 0) {
				System.out.println(memId + " 체크아웃 성공! ");
			}else {
				System.out.println(memId + " 체크아웃 실패!");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			JDBCUtill.close(conn, stmt, pstmt, rs);
		}
	}



	/*
	 * 회원정보를 추가하는 메서드
	 */
	private void insertMember() {
		boolean chk = false;
		String romId = "";
		do {
			System.out.println();
			System.out.println("어느방에 체크인 하시겠습니까?.");
			System.out.print("방번호 입력=>");
			romId = scan.next();
			chk = checkMember(romId);
			if (chk == true) {
				System.out.println( romId + "방에는 이미 사람이 존재합니다.");
				System.out.println("다시");
			}

		} while (chk == true);

		System.out.print("회원이름 >>");
		String memName = scan.next();
		try {
			conn = JDBCUtill.getConnection();

			String sql = "INSERT INTO room ( rom_id, rom_name)"
					+ " VALUES (?, ?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, romId);
			pstmt.setString(2, memName);
		
			// int값을 리턴한다 select는 excute커리문 말고 업데이트 딜리트는 executeUpdate를 사용해야 한다.
			int cnt = pstmt.executeUpdate();
			if (cnt > 0) {
				System.out.println(romId + " 체크인 성공");
			} else {
				System.out.println(romId + " 체크인 실패");
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			// 자원반납...
			JDBCUtill.close(conn, stmt, pstmt, rs);
		}
	}

	/*
	 * 회원ID를 이용하여 회원이 존재하는지 알려주는 메서드
	 * 
	 * @param memId
	 * 
	 * @return 회원이 존재하면 true, 없으면 false 리턴함
	 */
	private boolean checkMember(String memId) {
		// TODO Auto-generated method stub
		boolean chk = false;
		try {
			conn = JDBCUtill.getConnection();
			String sql = "select count(*) as cnt from room " + " where rom_id = ?";

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, memId);

			rs = pstmt.executeQuery();

			int cnt = 0;
			if (rs.next()) {
				cnt = rs.getInt("cnt");
			}
			if (cnt > 0) {
				chk = true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			JDBCUtill.close(conn, stmt, pstmt, rs);
		}

		return chk;
	}

	public static void main(String[] args) {
		Hotel memObj = new Hotel();
		memObj.start();
	}

}
